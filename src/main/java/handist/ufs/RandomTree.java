package handist.ufs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.Random;

/**
 * Random tree exploration.
 */
public class RandomTree implements Serializable {

    /** Serial Version UID */
    private static final long serialVersionUID = -5647140014720772065L;

    /** Random number generator for this player */
    Random r;

    /**
     * Constructor
     * <p>
     *
     * @param seed random seed for the random number generator used when calling
     *             method {@link #growTree(int)}
     */
    public RandomTree(long seed) {
        r = new Random(seed);
    }

    /**
     * Method which starts a new UTS computation of maximum depth specified by the
     * depth set when initializing this {@link RandomTree} and of seed generated by
     * this instance dedicated random number generator
     *
     * @return the number of nodes in the tree explored
     */
    public Long growTree(int treeDepth) {
        final MessageDigest md = UTS.encoder();
        final UTS tree = new UTS(treeDepth);
        tree.seed(md, r.nextInt(), treeDepth);
        tree.run(md);

        return tree.count;
    }

    /**
     * Method which starts a new UTS computation with the given seed and the maximum
     * depth specified as parameter.
     *
     * @param seed      the seed to use to generate the tree
     * @param treeDepth the maximum depth of the tree to compute
     * @return the size of the tree (number of nodes explored)
     */
    public Long growTree(int seed, int treeDepth) {
        final MessageDigest md = UTS.encoder();
        final UTS tree = new UTS(treeDepth);
        tree.seed(md, seed, treeDepth);
        tree.run(md);

        return tree.count;
    }
}
